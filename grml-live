#!/bin/sh
# Filename:      grml-live
# Purpose:       build process script for generating a (grml based) Linux Live-ISO
# Authors:       grml-team (grml.org), (c) Michael Prokop <mika@grml.org>
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2 or any later version.
# Latest change: Sat Sep 15 21:36:04 CEST 2007 [mika]
################################################################################

# read configuration files, set some misc variables {{{

export LANG=C
export LC_ALL=C

# exit on any error:
set -e

# we need root permissions for the build-process:
if [ "$(id -u 2>/dev/null)" != 0 ] ; then
   echo "Error: please run this script with uid 0 (root)." >&2
   exit 1
fi

VERBOSE=''
FORCE=''

# source main configuration file:
. /etc/grml/grml-live.conf

PN=$(basename $0)
TMPFILE=$(mktemp)
# }}}

# clean exit {{{
bailout() {
  rm -f "$TMPFILE"
  [ -n "$1" ] && EXIT="$1" || EXIT="1"
  [ -n "$2" ] && echo "$2">&2
  exit "$EXIT"
}
trap bailout 1 2 3 15
# }}}

# check for important variables {{{
[ -n "$GRML_FAI_CONFIG" ] || GRML_FAI_CONFIG=/etc/grml/fai
[ -n "$HOSTNAME" ] || HOSTNAME=grml
[ -n "$USERNAME" ] || USERNAME=grml
[ -n "$CLASSES" ] || CLASSES="GRML"
[ -n "$CHROOT_TARGET" ] || bailout 1 "${PN}: \$CHROOT_TARGET not specified. Please adjust /etc/grml/grml-live.conf. Exiting."
# }}}

# usage information {{{
usage()
{
  echo "
$PN - build process script for generating a (grml based) Linux Live-ISO

Usage: $PN [-c <classe[s]>] [-t <target_directory>] [-F] [-h|--help] [additional_arguments_for_fai]

Usage examples:

    $PN
    $PN -c GRML -t /dev/shm/grml
    $PN -c GRML,GRML_X -t /grml/chroot/grml_uncompressed
    $PN -c GRML

More details: man grml-live
              /usr/share/doc/grml-live/grml-live.html

Please send your bug reports, feedback,.. to the grml-team.
http://grml.org/bugs/
"
}
# }}}

# command line parsing {{{

while getopts ?c:f:t:Fhv: opt; do
  case "$opt" in
    c) CLASSES="$OPTARG" ;;
    F) FORCE=1 ;;
    h) usage ; bailout 0 ;;
    t) CHROOT_TARGET="$OPTARG" ;;
    v) VERBOSE="-v" ;;
    ?) echo "invalid option -$OPTARG" >&2; bailout 1 ;;
  esac
done
shift $(($OPTIND - 1))  # set ARGV to the first not parsed commandline parameter
FAI_ARGS="$*"

# }}}

# some misc checks before executing FAI {{{
[ -n "$CLASSES" ] || bailout 1 "Error: \$CLASSES unset, please set it in /etc/grml/grml-live.conf or
specify it on the command line using the -c|--classes option."
[ -n "$CHROOT_TARGET" ] || bailout 1 "Error: \$CHROOT_TARGET unset, please set it in /etc/grml/grml-live.conf or
specify it on the command line using the -t|--target option."

if [ "$EXECUTE" != '1' ] ; then
   echo "Error: please set EXECUTE=1 in /etc/grml/grml-live.conf to really execute grml-live.">&2
   echo
   echo "See 'man grml-live' for more details or execute '$PN --help'">&2
   echo
   bailout 1
fi
# }}}

# ask user whether the setup is ok {{{
if [ -z "$FORCE" ] ; then
   echo
   echo "$PN - check your configuration (or invoke using -F to force execution without prompting)"
   echo
   echo "  FAI classes:    $CLASSES"
   echo "  chroot target:  $CHROOT_TARGET"
   echo "  build target:   $BUILD_TARGET"
   echo "  ISO target:     $ISO_TARGET"

   [ -n "$FAI_ARGS" ] && echo "  additional arguments for FAI: $FAI_ARGS"
   echo
   echo -n "Is this ok for you? [y/N] "
   read a
   if ! [ "$a" = 'y' -o "$a" = 'Y' ] ; then
      bailout 1 "Exiting as requested."
   fi
   echo
fi
# }}}

if [ -n "$GRML_LIVE_SOURCES" ] ; then
   echo "$GRML_LIVE_SOURCES" > /etc/grml/fai/apt/sources.list
fi

if [ -n "$FAI_DEBOOTSTRAP" ] ; then
   sed -i "s#^FAI_DEBOOTSTRAP#FAI_DEBOOTSTRAP=$FAI_DEBOOTSTRAP#" /etc/grml/fai/make-fai-nfsroot.conf
fi

# execute FAI {{{
if [ -d "$CHROOT_TARGET" ] ; then
   echo "  [x] $CHROOT_TARGET exists already, skipping the stage 'fai dirnstall'"
else
   mkdir "$CHROOT_TARGET" || bailout 5 "Problem with creating $CHROOT_TARGET for FAI"
   fai $VERBOSE -C "$GRML_FAI_CONFIG" -c"$CLASSES" dirinstall "$CHROOT_TARGET" $FAI_ARGS
fi
# }}}

mkdir -p "$BUILD_TARGET" || bailout 6 "Problem with creating $BUILD_TARGET for stage ARCH"

# x86:
if [ "$ARCH" = x86 ] ; then
   if [ -d "$BUILD_TARGET"/boot/isolinux ] ; then
      echo "  [x] $BUILD_TARGET/boot/isolinux exists already - skipping stage 'boot/isolinux'"
      continue
   else
      mkdir -p "$BUILD_TARGET"/boot/isolinux
      mkdir "$BUILD_TARGET"/GRML
      cp /boot/memtest86+.bin                                       "$BUILD_TARGET"/boot/isolinux/memtest
      cp "$CHROOT_TARGET"/boot/initrd*                              "$BUILD_TARGET"/boot/isolinux/initrd.gz
      cp "$CHROOT_TARGET"/boot/vmlinuz*                             "$BUILD_TARGET"/boot/isolinux/linux26
      cp /usr/lib/syslinux/chain.c32                                "$BUILD_TARGET"/boot/isolinux/
      cp /usr/lib/syslinux/isolinux.bin                             "$BUILD_TARGET"/boot/isolinux/
      cp /usr/lib/syslinux/memdisk                                  "$BUILD_TARGET"/boot/isolinux/
      cp /usr/lib/syslinux/menu.c32                                 "$BUILD_TARGET"/boot/isolinux/
      cp /usr/share/grml-live/x86_files/boot/isolinux/allinone.img  "$BUILD_TARGET"/boot/isolinux/
      cp /usr/share/grml-live/x86_files/boot/isolinux/balder10.imz  "$BUILD_TARGET"/boot/isolinux/
      cp /usr/share/grml-live/x86_files/boot/isolinux/boot-beep.msg "$BUILD_TARGET"/boot/isolinux/
      cp /usr/share/grml-live/x86_files/boot/isolinux/boot.msg      "$BUILD_TARGET"/boot/isolinux/
      cp /usr/share/grml-live/x86_files/boot/isolinux/f*            "$BUILD_TARGET"/boot/isolinux/
      cp /usr/share/grml-live/x86_files/boot/isolinux/isolinux.cfg  "$BUILD_TARGET"/boot/isolinux/
      cp /usr/share/grml-live/x86_files/boot/isolinux/logo.16       "$BUILD_TARGET"/boot/isolinux/
      cp /usr/share/grml-live/x86_files/boot/isolinux/syslinux.cfg  "$BUILD_TARGET"/boot/isolinux/
      # minirt26.gz
      # boot.cat
      if [ -n "$WINDOWS_BINARIES" ] ; then
         if [ -d "$BUILD_TARGET"/windows ] ; then
            echo "  [x] $BUILD_TARGET/windows exists already - skipping stage WINDOWS_BINARIES"
            return 0
         else
            mkdir "$BUILD_TARGET"/windows
            ( cd "$BUILD_TARGET"/windows
              for file in pageant plink pscp psftp putty puttygen ; do
                  wget ${WINDOWS_BINARIES}/${file}.exe
              done )
         fi
      fi
   fi
# amd64:
elif [ "$ARCH" = amd64 ] ; then
    echo 'Warning: gebi, it is your turn. :)'>2
# ppc:
elif [ "$ARCH" = ppc ] ; then
    echo 'Warning: formorer, it is your turn. :)'>2
# unsuported:
else
   echo 'Warning: Unsupported ARCH, sorry. Want to support it? Contribute!'>&2
fi

if [ -d "$BUILD_TARGET"/live ] ; then
   echo "  [x] $BUILD_TARGET/live exists already, skipping stage 'squashfs'"
else
   mkdir "$BUILD_TARGET"/live
   mksquashfs $CHROOT_TARGET/* $BUILD_TARGET/live/grml.squashfs -noappend
fi

if [ -d "$ISO_TARGET" ] ; then
   echo "  [x] $ISO_TARGET exists already, skipping the stage 'iso build'"
else
   mkdir -p "$ISO_TARGET" || bailout 6 "Problem with creating $ISO_TARGET for stage 'iso build'"
   ( cd "$BUILD_TARGET" &&
     mkisofs -V "Debian/etch grml" -publisher 'Michael Prokop <mika@grml.org>' \
             -l -r -J -no-emul-boot -boot-load-size 4 -boot-info-table    \
             -c boot/isolinux/boot.cat -b boot/isolinux/isolinux.bin      \
             -o "$ISO_TARGET"/grml_0.0-1.iso .
   )

fi

echo "  [*] Sucessfully finished execution of $PN"
bailout 0

## END OF FILE #################################################################
# vim:foldmethod=marker ts=2 ft=sh ai expandtab tw=80 sw=2
