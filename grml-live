#!/bin/bash
# Filename:      grml-live
# Purpose:       build process script for generating a (grml based) Linux Live-ISO
# Authors:       grml-team (grml.org), (c) Michael Prokop <mika@grml.org>
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2 or any later version.
# Latest change: Sat Sep 29 10:44:26 CEST 2007 [mika]
################################################################################

# read configuration files, set some misc variables {{{

export LANG=C
export LC_ALL=C

# exit on any error:
set -e

# we need root permissions for the build-process:
if [ "$(id -u 2>/dev/null)" != 0 ] ; then
   echo "Error: please run this script with uid 0 (root)." >&2
   exit 1
fi

# make sure they are not set by default
VERBOSE=''
FORCE=''

if [ -r /etc/grml/lsb-functions ] ; then
   . /etc/grml/lsb-functions
else
   einfo()  { echo "  [*] $*" ;}
   eerror() { echo "  [!] $*">&2 ;}
   ewarn()  { echo "  [x] $*" ;}
   eend()   { return 0 ;}
fi

# source main configuration file:
LIVE_CONF=/etc/grml/grml-live.conf
. $LIVE_CONF

PN=$(basename $0)
# }}}

# clean exit {{{
bailout() {
  [ -n "$MIRROR_DIRECTORY" ] && umount "${CHROOT_TARGET}/${MIRROR_DIRECTORY}"
  [ -n "$1" ] && EXIT="$1" || EXIT="1"
  [ -n "$2" ] && eerror "$2">&2
  exit "$EXIT"
}
trap bailout 1 2 3 15
# }}}

# check for important variables {{{
[ -n "$GRML_FAI_CONFIG" ] || GRML_FAI_CONFIG=/etc/grml/fai
[ -n "$HOSTNAME" ] || HOSTNAME=grml
[ -n "$USERNAME" ] || USERNAME=grml
[ -n "$CLASSES" ]  || CLASSES="GRML,I386"
[ -n "$BOOT_METHOD" ] || BOOT_METHOD='isolinux'
[ -n "$TARGET" ] || bailout 1 "${PN}: \$TARGET not specified. Please adjust $LIVE_CONF. Exiting."

[ -n "$VERSION" ]  || VERSION="0.0.1"
[ -n "$RELEASENAME" ] || RELEASENAME="grml-live rocks"
[ -n "$GRML_NAME" ] || GRML_NAME='grml'

[ -n "$LOGDIR" ] || LOGDIR="/var/log/fai/dirinstall/$HOSTNAME"
[ -d "$LOGDIR" ] || mkdir -p $LOGDIR
LOGFILE="$LOGDIR/grml-live.conf"
# }}}

# some important functions {{{

# log output:
# usage: log "string to log"
log() { echo "$*" >> $LOGFILE ; }

# cut string at character number int = $1
# usage: cut_string 5 "1234567890" will output "12345"
cut_string() {
  [ -n "$2" ] || return 1
  echo "$2" | head -c "$1"; echo -ne "\n"
}

# prepend int = $1 spaces before string = $2
# usage: extend_string_begin 5 "123" will output "  123"
extend_string_begin() {
  [ -n "$2" ] || return 1
  local COUNT="$(echo $2 | wc -c)"
  local FILL="$(expr $COUNT - $1)"
  while [ "$FILL" -gt 1 ] ; do
    echo -n " "
    local FILL=$(expr $FILL - 1)
  done
  while [ "$FILL" -lt 1 ] ; do
    echo -n " "
    local FILL=$(expr $FILL + 1)
  done
  echo "$2" | head -c "$1"; echo -ne "\n"
}

# append int = $1 spaces to string = $2
# usage: extend_string_begin 5 "123" will output "123  "
extend_string_end() {
  [ -n "$2" ] || return 1
  echo -n "$2" | head -c "$1"
  local COUNT="$(echo $2 | wc -c)"
  local FILL="$(expr $COUNT - $1)"
  while [ "$FILL" -gt 1 ] ; do
    echo -n " "
    local FILL=$(expr $FILL - 1)
  done
  while [ "$FILL" -lt 1 ] ; do
    echo -n " "
    local FILL=$(expr $FILL + 1)
  done
  echo -ne "\n"
}
# }}}

# usage information {{{
usage()
{
  echo "
$PN - build process script for generating a (grml based) Linux Live-ISO

Usage: $PN [-c <classe[s]>] [-g <grml_name>] [-i <iso_name> ] \\
                 [-r <release_name>] [-s <suite>] [-t <target_directory>] \\
                 [-v <version_number>] [-FVh]

Usage examples:

    $PN
    $PN -c GRMLBASE,GRML_X,I386 -t /grml/
    $PN -c GRMLBASE,I386 -t /dev/shm/grml
    $PN -c GRMLBASE,GRML_SMALL,I386 -g grml-small -v 1.0
    $PN -c GRMLBASE,I386 -i grml_0.0-1.iso
    $PN -c GRMLBASE,I386 -s sid -V

More details: man grml-live
              /usr/share/doc/grml-live/grml-live.html

Please send your bug reports, feedback,.. to the grml-team.
http://grml.org/bugs/
"
}
# }}}

# command line parsing {{{

while getopts "c:g:i:r:s:t:v:FhV" opt; do
  case "$opt" in
    c) CLASSES="$OPTARG" ;;
    g) GRML_NAME="$OPTARG" ;;
    i) ISO_NAME="$OPTARG" ;;
    r) RELEASENAME="$OPTARG" ;;
    s) SUITE="$OPTARG" ;;
    t) TARGET="$OPTARG"
       CHROOT_TARGET="$TARGET/grml_chroot"
       BUILD_TARGET="$TARGET/grml_cd"
       ISO_TARGET="$TARGET/grml_isos"
       ;;
    v) VERSION="$OPTARG" ;;
    F) FORCE=1 ;;
    h) usage ; bailout 0 ;;
    V) VERBOSE="-v" ;;
    ?) echo "invalid option -$OPTARG" >&2; bailout 1 ;;
  esac
done
shift $(($OPTIND - 1))  # set ARGV to the first not parsed commandline parameter

# }}}

# some misc checks before executing FAI {{{
[ -n "$CLASSES" ] || bailout 1 "Error: \$CLASSES unset, please set it in $LIVE_CONF or
specify it on the command line using the -c|--classes option."
[ -n "$TARGET" ] || bailout 1 "Error: \$TARGET unset, please set it in $LIVE_CONF or
specify it on the command line using the -t|--target option."
# }}}

# ask user whether the setup is ok {{{
if [ -z "$FORCE" ] ; then
   echo
   echo "${PN}: check your configuration (or use -F to force execution without prompting):"
   echo
   echo "  FAI classes:       $CLASSES"
   echo "  main directory:    $TARGET"
   [ -n "$CHROOT_TARGET" ] && echo "  chroot target:     $CHROOT_TARGET"
   [ -n "$BUILD_TARGET" ]  && echo "  build target:      $BUILD_TARGET"
   [ -n "$ISO_TARGET" ]    && echo "  ISO target:        $ISO_TARGET"
   [ -n "$GRML_NAME" ]     && echo "  grml name:         $GRML_NAME"
   [ -n "$VERSION" ]       && echo "  grml version:      $VERSION"
   [ -n "$SUITE" ]         && echo "  Debian suite:      $SUITE"
   [ -n "$BOOT_METHOD" ]   && echo "  Boot method:       $BOOT_METHOD"
   [ -n "$FAI_ARGS" ]      && echo "  additional arguments for FAI: $FAI_ARGS"
   [ -n "$VERBOSE" ]       && echo "  Using VERBOSE mode."
   echo
   echo -n "Is this ok for you? [y/N] "
   read a
   if ! [ "$a" = 'y' -o "$a" = 'Y' ] ; then
      bailout 1 "Exiting as requested."
   fi
   echo

   start_seconds=$(cut -d . -f 1 /proc/uptime)
   log "------------------------------------------------------------------------------"
   log "Starting grml-live run [$(date)]"
fi
# }}}

# on-the-fly configuration {{{
if [ -n "$MIRROR_DIRECTORY" ] ; then
   if ! [ -d "$MIRROR_DIRECTORY/debian" ] ; then
      log "Sorry, $MIRROR_DIRECTORY/debian does not seem to exist. Exiting. [$(date)]"
      eerror "Sorry, $MIRROR_DIRECTORY/debian does not seem to exist. Exiting."
      bailout 1
   fi
   echo "$MIRROR_SOURCES" > /etc/grml/fai/apt/sources.list
   if [ -n "$GRML_LIVE_SOURCES" ] ; then
      echo "$GRML_LIVE_SOURCES" >> /etc/grml/fai/apt/sources.list
   fi
elif [ -n "$GRML_LIVE_SOURCES" ] ; then
   echo "$GRML_LIVE_SOURCES" > /etc/grml/fai/apt/sources.list
fi

if [ -n "$FAI_DEBOOTSTRAP" ] ; then
   sed -i "s#^FAI_DEBOOTSTRAP=.*#FAI_DEBOOTSTRAP=\"$FAI_DEBOOTSTRAP\"#" /etc/grml/fai/make-fai-nfsroot.conf
fi

# does this suck? YES!
if [ -n "$SUITE" ] ; then
   sed -i "s/SUITE=.*/SUITE=\"$SUITE\"/" $LIVE_CONF

   DIST="\|\ etch\ \|\ stable\ \|\ lenny\ \|\ testing\ \|\ sid\ \|\ unstable\ "
   sed -i "s/\(deb .\+\)\([ \t]+\)$DIST\([ \t]+\)\(main \)/\1\2 $SUITE \3\4/" $LIVE_CONF
   sed -i "s/\(deb .\+\)\([ \t]+\)$DIST\([ \t]+\)\(main \)/\1\2 $SUITE \3\4/" /etc/grml/fai/apt/sources.list

   DIST='\"etch\|=\"stable=\"lenny=\"testing=\"sid=\"unstable'
   sed -i "s#FAI_DEBOOTSTRAP=$DIST#FAI_DEBOOTSTRAP=\"$SUITE#" $LIVE_CONF
   sed -i "s#FAI_DEBOOTSTRAP=$DIST#FAI_DEBOOTSTRAP=\"$SUITE#" /etc/grml/fai/make-fai-nfsroot.conf
fi
# }}}

# CHROOT_TARGET - execute FAI {{{
[ -n "$CHROOT_TARGET" ] || CHROOT_TARGET="$TARGET/grml_chroot"

if [ -d "$CHROOT_TARGET/bin" ] ; then
   log "$CHROOT_TARGET exists already, skipping stage 'fai dirinstall'"
   ewarn "$CHROOT_TARGET exists already, skipping stage 'fai dirinstall'" ; eend 0
else
   mkdir -p "$CHROOT_TARGET" || bailout 5 "Problem with creating $CHROOT_TARGET for FAI"
   if [ -n "${MIRROR_DIRECTORY}" ] ; then
      mkdir -p "${CHROOT_TARGET}/${MIRROR_DIRECTORY}"
      mount --bind "${MIRROR_DIRECTORY}" "${CHROOT_TARGET}/${MIRROR_DIRECTORY}"
   fi
   fai $VERBOSE -C "$GRML_FAI_CONFIG" -c"$CLASSES" -u "$HOSTNAME" dirinstall "$CHROOT_TARGET" $FAI_ARGS | tee -a $LOGFILE
   umount $CHROOT_TARGET/proc 2>/dev/null || /bin/true
   umount $CHROOT_TARGET/sys  2>/dev/null || /bin/true
   [ -n "$MIRROR_DIRECTORY" ] && umount "${CHROOT_TARGET}/${MIRROR_DIRECTORY}"

   # notice: 'fai dirinstall' does not seem to exit appropriate, so:
   ERROR=''
   if [ -r "/var/log/fai/dirinstall/$HOSTNAME/software.log" ] ; then
      grep 'dpkg: error processing' /var/log/fai/dirinstall/$HOSTNAME/software.log >> $LOGFILE && ERROR=1
   fi

   if [ -r "/var/log/fai/dirinstall/$HOSTNAME/shell.log" ] ; then
      grep 'FAILED with exit code' /var/log/fai/dirinstall/$HOSTNAME/shell.log >> $LOGFILE && ERROR=2
   fi

   if [ -n "$ERROR" ] ; then
      log "There was an error during execution of stage 'fai dirinstall' [$(date)]"
      eerror "There was an error during execution of stage 'fai dirinstall'"
      echo "   Check out /var/log/fai/dirinstall/$HOSTNAME/ for details. [exit ${ERROR}]"
      eend 1 ; exit 1
   else
      log "Finished execution of stage 'fai dirinstall' [$(date)]"
      einfo "Finished execution of stage 'fai dirinstall'"
   fi
fi
# }}}

# BUILD_TARGET - execute arch specific stuff and squashfs {{{
[ -n "$BUILD_TARGET" ] || BUILD_TARGET="$TARGET/grml_cd"
mkdir -p "$BUILD_TARGET" || bailout 6 "Problem with creating $BUILD_TARGET for stage ARCH"

[ -n "$ARCH" ] || ARCH="$(dpkg --print-architecture)"

# i386:
if [ "$ARCH" = i386 ] || [ "$ARCH" = amd64 ] ; then
   if [ -d "$BUILD_TARGET"/boot ] ; then
      log "$BUILD_TARGET/boot exists already, skipping stage 'boot'"
      ewarn "$BUILD_TARGET/boot exists already, skipping stage 'boot'" ; eend 0
   else
      # booting stuff:
      mkdir -p "$BUILD_TARGET"/boot/isolinux
      cp /boot/memtest86+.bin                              "$BUILD_TARGET"/boot/isolinux/memtest
      cp "$CHROOT_TARGET"/boot/initrd*                     "$BUILD_TARGET"/boot/isolinux/initrd.gz
      cp "$CHROOT_TARGET"/boot/vmlinuz*                    "$BUILD_TARGET"/boot/isolinux/linux26
      cp /usr/lib/syslinux/chain.c32                       "$BUILD_TARGET"/boot/isolinux/
      cp /usr/lib/syslinux/isolinux.bin                    "$BUILD_TARGET"/boot/isolinux/
      cp /usr/lib/syslinux/memdisk                         "$BUILD_TARGET"/boot/isolinux/
      cp /usr/lib/syslinux/menu.c32                        "$BUILD_TARGET"/boot/isolinux/
      cp /usr/share/grml-live/templates/boot/isolinux/*    "$BUILD_TARGET"/boot/isolinux/
      cp /usr/share/grml-live/templates/boot/isolinux/*    "$BUILD_TARGET"/boot/isolinux/
      cp -a /usr/share/grml-live/templates/boot/grub       "$BUILD_TARGET"/boot/

      [ -d "$BUILD_TARGET"/GRML ] || mkdir "$BUILD_TARGET"/GRML
      cp -a /usr/share/grml-live/templates/GRML/* "$BUILD_TARGET"/GRML/

      # adjust boot splash information:
      ISO_DATE="$(date +%Y-%m-%d)"
      RELEASE_INFO="$GRML_NAME $VERSION - Release Codename $RELEASENAME"
      RELEASE_INFO="$(cut_string 68 "$RELEASE_INFO")"
      RELEASE_INFO="$(extend_string_end 68 "$RELEASE_INFO")"

      sed -i "s/%RELEASE_INFO%/$GRML_NAME $VERSION - $RELEASENAME/" "$BUILD_TARGET"/GRML/grml-version
      sed -i "s/%DATE%/$ISO_DATE/"             "$BUILD_TARGET"/GRML/grml-version

      sed -i "s/%RELEASE_INFO%/$RELEASE_INFO/" "$BUILD_TARGET"/boot/isolinux/boot.msg
      sed -i "s/%DATE%/$ISO_DATE/"             "$BUILD_TARGET"/boot/isolinux/boot.msg

      sed -i "s/%RELEASE_INFO%/$RELEASE_INFO/" "$BUILD_TARGET"/boot/isolinux/boot-beep.msg
      sed -i "s/%DATE%/$ISO_DATE/"             "$BUILD_TARGET"/boot/isolinux/boot-beep.msg

      sed -i "s/%VERSION%/$VERSION/"           "$BUILD_TARGET"/boot/grub/menu.lst
      sed -i "s/%GRML_NAME%/$GRML_NAME/"       "$BUILD_TARGET"/boot/grub/menu.lst

      # autostart for Windows:
      cp /usr/share/grml-live/templates/windows/autostart/* "$BUILD_TARGET"/
      # windows-binaries:
      if [ -n "$WINDOWS_BINARIES" ] ; then
         if [ -f "$BUILD_TARGET"/windows/putty.exe ] ; then
            log "$BUILD_TARGET/windows exists already, skipping stage 'WINDOWS_BINARIES'"
            ewarn "$BUILD_TARGET/windows exists already, skipping stage 'WINDOWS_BINARIES'" ; eend 0
         else
            mkdir "$BUILD_TARGET"/windows
            ( cd "$BUILD_TARGET"/windows
              for file in pageant plink pscp psftp putty puttygen ; do
                 wget -O ${file}.exe ${WINDOWS_BINARIES}/${file}.exe
              done )
         fi
      log "Finished execution of stage 'WINDOWS_BINARIES' [$(date)]"
      einfo "Finished execution of stage 'WINDOWS_BINARIES'" ; eend 0
      fi
   einfo "Finished execution of stage 'boot'" ; eend 0
   fi
# ppc:
elif [ "$ARCH" = powerpc ] ; then
    ewarn 'Warning: formorer, it is your turn. :)'>&2
# unsuported:
else
   eerror 'Error: Unsupported ARCH, sorry. Want to support it? Contribute!' ; eend 1
fi

if [ -f "$BUILD_TARGET"/live/grml.squashfs ] ; then
   log "$BUILD_TARGET/live exists already, skipping stage 'squashfs'"
   ewarn "$BUILD_TARGET/live exists already, skipping stage 'squashfs'" ; eend 0
else
   mkdir "$BUILD_TARGET"/live
   mksquashfs $CHROOT_TARGET/* $BUILD_TARGET/live/grml.squashfs -noappend
   log "Finished execution of stage 'squashfs' [$(date)]"
   einfo "Finished execution of stage 'squashfs'" ; eend 0
fi

# create md5sum file:
( cd $BUILD_TARGET/GRML &&
find .. -type f -not -name md5sums -exec md5sum {} \; > md5sums )
# }}}

# ISO_TARGET - mkisofs {{{
[ -n "$ISO_TARGET" ] || ISO_TARGET="$TARGET/grml_isos"
[ -n "$ISO_NAME" ] || ISO_NAME="$GRML_NAME_${VERSION}.iso"

if [ "$BOOT_METHOD" = "isolinux" ] ; then
   BOOT_FILE="boot/isolinux/isolinux.bin -c boot/isolinux/boot.cat"
elif [ "$BOOT_METHOD" = "grub" ] ; then
   BOOT_FILE="boot/grub/stage2_eltorito"
fi

if [ -f "${ISO_TARGET}/${ISO_NAME}" ] ; then
   log "$ISO_TARGET exists already, skipping stage 'iso build'"
   ewarn "$ISO_TARGET exists already, skipping stage 'iso build'" ; eend 0
else
   mkdir -p "$ISO_TARGET" || bailout 6 "Problem with creating $ISO_TARGET for stage 'iso build'"
   CURRENT_DIR=$(pwd)
   cd "$BUILD_TARGET" &&
   mkisofs -V "grml $VERSION" -publisher 'grml-live | grml.org' \
           -l -r -J -no-emul-boot -boot-load-size 4 -boot-info-table    \
           -b $BOOT_FILE \
           -o "${ISO_TARGET}/${ISO_NAME}" . ; RC=$?
   cd $CURRENT_DIR
   if [ "$RC" = 0 ] ; then
      log "Finished execution of stage 'iso build' [$(date)]"
      einfo "Finished execution of stage 'iso build'" ; eend 0
   else
      log "There was an error ($RC) executing stage 'iso build' [$(date)]"
      eerror "There was an error executing stage 'iso build'" ; eend 1
      bailout $RC
   fi
fi
# }}}

# finalize {{{
[ -n "$start_seconds" ] && SECONDS="$[$(cut -d . -f 1 /proc/uptime)-$start_seconds]"
einfo "Sucessfully finished execution of $PN [running ${SECONDS} seconds]" ; eend 0
log "Sucessfully finished execution of $PN [running ${SECONDS} seconds]"
log "------------------------------------------------------------------------------"
bailout 0
# }}}

## END OF FILE #################################################################
# vim:foldmethod=marker ts=2 ft=sh ai expandtab tw=80 sw=3
