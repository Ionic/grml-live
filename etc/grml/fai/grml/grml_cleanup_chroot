#!/bin/bash
# Filename:      /etc/grml/fai/grml/grml_cleanup_chroot
# Purpose:       clean up grml chroot
# Authors:       (c) Michael Prokop <mika@grml.org>
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2.
# Latest change: Wed Sep 19 13:38:45 CEST 2007 [mika]
################################################################################

# misc stuff
  umask 022
  . /etc/grml/lsb-functions || exit 6
  [ -x /lib64 ] && GRML64=yes || GRML64=''

# detect kernel version, assume newest kernel version
  KERNEL=$(ls -1 /lib/modules/ | sort -r -u | head -1)

if [ -f /usr/share/fonts/X11/misc/artwiz-cursor.pcf.gz ] ; then
  if dpkg-divert --list artwiz-cursor | grep -q /usr/share/fonts/X11/misc/cursor.pcf.gz ; then
     eerror "Broken diversion of artwiz-cursor, see #341397, trying to fix it"
     ( cd /usr/share/fonts/X11/misc/ &&
       dpkg-divert --remove /usr/share/fonts/X11/misc/cursor.pcf.gz && mkfontdir )
     eend 0
  fi
fi

# start of main cleanup process...
if ! [ -r /boot/config-"$KERNEL" ] ; then
  eerror "/boot/config-$KERNEL not available. \$KERNEL not set to correct value?"
  eend 1
  exit 9
fi

einfo "Preparing grml-system: $(cat /etc/grml_version)" ; eend 0

einfo "Setting up /etc/motd.tail"
echo "" > /etc/motd.tail ; eend 0

einfo "Setting up /etc/modules: "
cat>/etc/modules<<EOF
# /etc/modules: kernel modules to load at boot time.
#
# This file should contain the names of kernel modules that are
# to be loaded at boot time, one per line.  Comments begin with
# a \`#', and everything on the line after them are ignored.
EOF
echo "" >> /etc/modules
grep '^[a-z]' /etc/grml/modules >> /etc/modules
eend 0

einfo "Setting up /etc/inittab"
cp /etc/inittab.grml  /etc/inittab
eend $?

if [ -x /usr/bin/make -a -r /usr/src/Makefile ] ; then
   einfo "Cleaning up /usr/src/linux-headers-$KERNEL"
   ( cd /usr/src && make clean && make symlinks )
   eend $?
fi

if [ -L /usr/include/linux ] ; then
  einfo "/usr/include/linux is ok" ; eend 0
elif [ -n "$GRML64" ] ; then
    if [ -d /usr/src/linux-headers-"$KERNEL" ] ; then
       einfo "grml64 detected, assuming /usr/src/linux-headers-$KERNEL is ok." ; eend 0
    else
       eerror "/usr/src/linux-headers-$KERNEL not found, exiting." ; eend 1
       exit 10
    fi
elif [ -d /usr/src/linux-headers-"$KERNEL" ] ; then
     eerror "/usr/include/linux is NOT a symlink to /usr/src/linux/include/linux/ - error"
     eend 1
     exit 10
else
     ewarn "linux-headers-$KERNEL not installed." ; eend 0
fi

einfo "Creating ~/.zshrc"
  touch ~/.zshrc
eend $?

if [ -r /usr/share/lintian/overrides/ion3 ] ; then
  einfo "Stripping ion3-stuff"
  cat /usr/share/lintian/overrides/ion3 | sed 's#.*./usr#/usr#' | \
  sed 's/.comment//' | xargs strip --strip-unneeded ; eend $?
else
  ewarn "ion3 not installed" ; eend 0
fi

if [ -d /usr/lib/valgrind/x86-linux/ ] ; then
  einfo "Stripping /usr/lib/valgrind/x86-linux/"
  strip  --strip-unneeded  /usr/lib/valgrind/x86-linux/*
  eend $?
else
  ewarn "valgrind not installed" ; eend 0
fi

if [ -x /usr/sbin/localepurge ] ; then
  einfo "Running localepurge"
  localepurge ; eend $?
else
  ewarn "localepurg not available" ; eend 0
fi

if [ -d /var/lib/backuppc/pc/localhost/ ] ; then
  einfo "Cleaning /var/lib/backuppc/pc/localhost/"
  rm -rf /var/lib/backuppc/pc/localhost/* ; eend $?
else
  ewarn "backuppc not installed" ; eend 0
fi

# find /var -name \*.pid
einfo "Removing pid-files"
  find /var/run -name \*.pid -exec rm {} \;
eend $?

einfo "Unmounting proc, /dev/pts, /dev/capi"
  umount /proc     2>/dev/null
  umount /dev/pts  2>/dev/null
  umount /dev/capi 2>/dev/null
  umount -a 2>/dev/null
eend $?

einfo "Removing /var/lib/apt/lists/*-stuff, dpkg-status-old and pkgcache.bin"
  rm -f /var/lib/apt/lists/*Packages
  rm -f /var/lib/apt/lists/*Release
  rm -f /var/lib/apt/lists/*Sources
  rm -f /var/lib/apt/lists/*.gpg
  rm -f /var/cache/apt-show-versions/*
  rm -f /var/cache/debconf/templates.dat-old
  rm -f /var/cache/apt/*.bin
  apt-get check 2>/dev/null
  dpkg --clear-avail
  apt-cache gencaches 2>/dev/null
  rm -f /var/lib/dpkg/status-old
  rm -f /var/lib/dpkg/available-old
eend $?

if [ -x /usr/bin/grep-dctrl ] ; then
   einfo "Cleaning up /var/lib/dpkg/status"
   grep-dctrl -v -F Status "purge ok not-installed" /var/lib/dpkg/status > status.new && \
   cp status.new /var/lib/dpkg/status && chmod 644 /var/lib/dpkg/status  && \
   chown root:root /var/lib/dpkg/status && rm status.new && eend 0 || eend 1
else
   ewarn "Warning: /usr/bin/grep-dctrl not available."
fi

einfo "Copying original runlevel.conf to /etc/runlevel.conf"
cp /etc/runlevel.conf.livecd /etc/runlevel.conf
eend $?

einfo "Removing x-server-conffiles"
  rm -f /etc/X11/xorg.conf /etc/X11/XF86Config-4 \
        /etc/X11/XF86Config /etc/XF86Config /etc/XF86Config-4 
eend $?

einfo "Removing ssh-keys"
  rm -f /etc/ssh/*key*
eend $?

# remove only "temporary" or saved files in the given directories
nuke(){
  for i in `find "$@" -name \*.gz -o -name \*.bz2 -o -name \*.0 2>/dev/null`; do
    rm -f "$i"
  done
}

# set all files in the given directories to a length of zero
zero(){
  for i in `find "$@" -type f -size +0 -not -name \*.ini 2>/dev/null`; do
    :> "$i"
  done
}

#for i in `find /usr/*/man -name \*.\[0-9ln\]` ; do
#  [ -f "$i".gz -o -f "$i".bz2 ] && rm -f "$i"
#done

if [ -d /var/spool/squid/ ] ; then
  einfo "Cleaning /var/spool/squid/0*"
  rm -rf /var/spool/squid/0*
  eend $?
else
  ewarn "update-ca-certificates not installed" ; eend 0
fi

# delete old dowloaded packages
einfo "Running apt-get clean"
  apt-get clean
eend $?

if [ -x /usr/bin/nvi ] ; then
  if ! [ -d /var/tmp/vi.recover ] ; then
    einfo "Creating nvi /var/tmp directory"
    mkdir -p /var/tmp/vi.recover
    chown root:root /var/tmp/vi.recover
    chmod 1777 /var/tmp/vi.recover
    eend $?
  fi
else
  ewarn "nvi not installed" ; eend 0
fi

if [ -x /sbin/depmod ] ; then
  if [ -r /lib/modules/$KERNEL ] ; then
    einfo "Updating modules.dep for kernel $KERNEL"
    depmod -ae -F /boot/System.map-"$KERNEL" "$KERNEL"
    eend $?
  fi
else
  ewarn "depmod not installed" ; eend 0
fi

einfo "Cleaning and removing some misc files and directories"
  rm -f  /etc/sysconfig/* /etc/motd.dpkg-new /etc/auto.master.distrib.dpkg-new    \
         /etc/samba/*.SID /etc/samba/*.tdb /dev/mouse* /dev/cdrom* /dev/cdwriter* \
         /var/run/*/* /var/run/* /var/log/ksymoops/* /var/lock/*/* /var/lock/*    \
         /var/state/*/* /var/state/* /var/log/nessus/*                            \
         /halt /reboot /ash.static /etc/dhcpc/*.info /etc/dhcpc/resolv*           \
         /etc/*passwd- /etc/*shadow- /etc/*group- /var/spool/postfix/maildrop/*   \
         /etc/lvm/.cache 2>/dev/null
  rm -rf /tmp/* /var/tmp/* /var/tmp/.* /var/backups/* /.ssh /root/.ssh /home/*/.ssh \
         /home/grml/* /home/grml/.??* /var/lib/texmf/ls-R  /var/spool/texmf/ls-R    \
         /var/lib/mysql /var/log/lilo_log.* /core* 2>/dev/null
  nuke   /var/log       /var/cache
  zero   /var/local     /var/log /var/spool \
         /var/lib/games /var/cache/man      \
         /var/lib/nfs   /var/lib/xkb        \
         /var/mail/grml /var/account/pacct
  mkdir -p /etc/sysconfig/network-scripts /etc/sysconfig/provider
  # Recreate empty utmp and wtmp
  :>/var/run/utmp
  :>/var/run/wtmp
eend $?

if [ -x /usr/sbin/update-ca-certificates ] ; then
  einfo "Updating ca-certificates"
  update-ca-certificates 1>/dev/null
  eend $?
else
  ewarn "update-ca-certificates not installed" ; eend 0
fi

# regenerate module dependencies and ls.so.cache
if [ -x /sbin/ldconfig ] ; then
  einfo "Updating ld.so.cache"
  ldconfig
  eend $?
else
  ewarn "ldconfig not installed" ; eend 0
fi

if [ -x /usr/bin/update-menus ] ; then
  einfo "Updating windowmanager menus"
  update-menus -v
  eend $?
else
  ewarn "update-menus not installed" ; eend 0
fi

if [ -x /usr/bin/mktexlsr ] ; then
  einfo "Updating texhash"
  mktexlsr
  eend $?
else
  ewarn "mktexlsr not installed" ; eend 0
fi

if [ -x /usr/bin/mandb ] ; then
  einfo "Updating mandb"
  mandb -c
  man doesnotexist >/dev/null 2>&1
  eend $?
else
  ewarn "mandb not installed" ; eend 0
fi

if [ -d /var/lib/clamav/ ] ; then
  einfo "Cleaning /var/lib/clamav/"
  rm -f /var/lib/clamav/clamav-* ; eend $?
  if [ -f /var/lib/clamav/daily.cvd ] ; then
     ( mkdir -p /usr/share/doc/clamav-freshclam/examples/ && \
       cd /usr/share/doc/clamav-freshclam/examples/ && \
       ln -sf /var/lib/clamav/daily.cvd . && \
       ln -sf /var/lib/clamav/main.cvd  . )
  fi
else
  ewarn "clamav[-freshclam] not installed" ; eend 0
fi

if ! [ -r /etc/ld.so.nohwcap ] ; then
   einfo "Creating /etc/ld.so.nohwcap"
   touch /etc/ld.so.nohwcap
fi

# installation of resolvconf in chroot *with* /proc
# is different from an installation without /proc,
# so make sure it is OK in any case; don't use /dev/shm
if [ -d /etc/resolvconf ] ; then
   rm -rf /etc/resolvconf/run
   mkdir /etc/resolvconf/run
   touch /etc/resolvconf/run/enable-updates
   mkdir /etc/resolvconf/run/interface
   cat > /etc/resolvconf/run/resolv.conf << EOF
# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
EOF
fi

if [ -x /usr/bin/updatedb ] ; then
  einfo "Updating locate-database"
  mount -t proc none /proc
  updatedb --prunepaths='/tmp /usr/tmp /var/tmp /grml /root /proc /sys'
  umount /proc
  eend $?
else
  ewarn "updatedb not installed" ; eend 0
fi

einfo "Unmounting all filesystems"
  umount -a
eend $?

################################################################################
# MISC STUFF
# ~~~~~~~~~~
# list dangling symlinks: ls **/*(-@)
#
# Security-audit:
# find / \! -type l -perm -2000 -ls > audit/sgid-files 
# find / \! -type l -perm -0002 -ls > audit/world-writeable-files
# find / \! -type l -perm -4000 -ls > audit/suid-files
# find / ( -perm 4000 -o -perm -2000 \) -exec ls -ld {} \;
# find / -perm -0777 -type d -ls > audit/writeable-dirs
# find / -size +3000k > audit/big_files.new
# find /all_filesystems -name ".. " -print -xdev | cat -vet
# find / -name ".*" -print -xdev | cat -v > audit/hidden-files
# find / -name ".. " -print -xdev | cat -vet > audit/unusal-file-names
#
# list non-stripped files:
# file /usr/sbin/* | grep -v ', stripped' | grep -v 'perl' | grep -v 'Bourne' | grep -v 'python' | grep -v 'symbolic link'
#
# Is software by grml-repos up2date?
# grep-dctrl --field Maintainer 'Michael Prokop' /var/lib/apt/lists/grml.org_repos_._* | grep Package | awk '{print $2}' | xargs echo 
#
# runlevel.conf:
# for file in /etc/init.d/* ; do grep $file -q /etc/runlevel.conf.hdinstall || echo $file not found ; done
################################################################################

## END OF FILE #################################################################
